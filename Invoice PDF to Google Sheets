function myFunction() {

  // Clears sheet 2 here so that each file loaded doesn't restart the sheet
  var sheet2 = get_invoice_sheet().getSheetByName('Sheet2');
  sheet2.clear();

  // Grab Folder for Invoices and set file type to pdf
  var folder = DriveApp.getFolderById('1nTdhCsdEKZmS8QBucbLdZurHCmdJV3Ra');  
  var files = folder.getFilesByType(MimeType.PDF);

  // Cycle through invoices
  while (files.hasNext()){
    var file = files.next();
    var blob = file.getBlob();
    var resource = {
      title: file.getName(),
      mimeType: MimeType.GOOGLE_DOCS
    }

    // Grabs file from loop and converts to google document
    var newDoc = Drive.Files.create(resource, blob);
    var newDocId = newDoc.id;

    // Grabs the new document and transfers it to the main goole sheet. Deletes doc afterwords
    dataTransfer(newDocId);
    DriveApp.getFileById(newDocId).setTrashed(true);

    // Converts plain text into cells on sheet
    splitText();
  }
}

// Gets the spreadsheet for the invoice sheet program
function get_invoice_sheet() {
  // Store spreadsheet for main spreadsheet
  var sheetID = '1p1JJod23yidCAH-5wGkQnmcna2jj27oJE2Vh7tI57Ec';  
  var spreadSheet = SpreadsheetApp.openById(sheetID);
  return spreadSheet;
}

function dataTransfer(docID){

  // Opens the document
  var doc = DocumentApp.openById(docID);

  // Grabs everything
  var text = doc.getBody().getText();

  // Splits the google doc based on new lines
  var lineSplit = '\n'
  var lines = ""
  var lines = text.split(lineSplit).map(function(item) {return [item]});

  // Clears the sheet to copied to and then pastes the data
  var sheet = get_invoice_sheet().getActiveSheet();
  sheet.clear()
  sheet.getRange(2, 1, lines.length, 1).setValues(lines);

  // Sets the bottom row for the next function
  sheet.getRange("A1").setValue(lines.length + 1)
}

// Finds the last row of a sheet by checking the first column. A bit finiky, will change later.
function find_last_row(sheet, skip, sheet_row){
  while (true){
    sheet_row += skip
    if (sheet.getRange(sheet_row, 1).getValue() === "") {
      if (skip === 1) {
        return sheet_row
      } else {
        sheet_row -= skip
        skip = Math.ceil(skip / 10)
      }
    }
  }
}

// This function gets the split text on sheet 1 and rearranges it to a more readable format.
function splitText(){

  // Get the spreadsheet to store in a var along with the two main sheets stored in seperate var.
  var spreadSheet = get_invoice_sheet();
  var sheet = spreadSheet.getSheetByName('Sheet1');
  var sheet2 = spreadSheet.getSheetByName('Sheet2');

  // Clears the sheet for new data
  sheet2.getRange('A1:I1').setValues([["QTY ORD", "QTY SHP", "Item Code", "Description", "UPC", "Act Weight", "Pack Sz", "Total Cost", "PB"]])

  // Gets the length of the rows previous stored in the A1 cell.
  var sheetLength = sheet.getRange('A1').getValue();
  
  // Checks to see what data is on sheet 2 and gets the first empty row.
  var sheet2Row = find_last_row(sheet2, 100, 1)    

  //Skipping the first row, loops through each row
  for (var i = 2; i < sheetLength + 2; i++){

    // Grabs the current row and splits it into an array
    var splitValue = sheet.getRange(i, 1).getValue().split(' ');
    
    // Loops through the split text
    for (var k = 0; k + 3 < splitValue.length; k++){
      var data_row = ["","","","","","","","",""]
        if (splitValue[k + 2] === "1-607260") {
          k = k
        };

      // Checks if this is the start of a invoice line
      if (itemStartCheck(splitValue, k)){

        // Checks for PB word
        if (splitValue[k - 1] == ("PB")) {
          data_row[8] = splitValue[k - 1]; // PB Check
        }

        // Initial Values
        data_row[0] = splitValue[k];                    //Ordered QTY
        data_row[1] = splitValue[k + 1];                //Delivered QTY
        data_row[2] = splitValue[k + 2].split('-')[1];  //Item Code

        //Finds the name
        var itemName = findName(splitValue, k + 3);     
        k = itemName[1];
        data_row[3] = itemName[0];
        
        // UPC
        data_row[4] = splitValue[k];

        // Checks if the quantity is 0
        if (parseInt(data_row[1]) === 0){

          // Gets information for items not shipped
          var itemName = findNameForOuts(splitValue, k + 1);
          k = itemName[1]
          data_row[7] = itemName[0];

        } else {

          var weight = total_weight(splitValue)
          if (weight !== -1) {

            // Weighted Product Info
            data_row[5] = splitValue[weight];  // Pack Size
            data_row[7] = splitValue[k + 6];   // Total Value
            var PB = splitValue[k + 8]
            if (PB === "PB") {data_row[8] = PB;}

          } else if (parseInt(data_row[4]) === 0 || splitValue[k + 7] === ""){

            // Shipper info
            data_row[6] = splitValue[k + 5];   // Pack Size
            data_row[7] = splitValue[k + 6];   // Total Value
            var PB = splitValue[k + 8];
            if (PB === "PB") {data_row[8] = PB;} 

          } else {

            // Normal Product Info
            data_row[6] = splitValue[k + 5];   // Pack Size
            data_row[7] = splitValue[k + 7];   // Total Value
            var PB = splitValue[k + 9]
            if (PB === "PB") {data_row[8] = PB;} 
          }
        }

        // Pastes information into sheet
        sheet2.getRange(sheet2Row, 1, 1, 9).setValues([data_row])
        sheet2Row++;
      }
    }
  }
}

function total_weight(split_array) {
  var index = split_array.indexOf("WEIGHT:")
  if (index !== -1) {
    return index + 1
  }
  return index
}

function findNameForOuts(currentString, i){
  //This will check how long the name is by finding the first section of the sentence that starts with zero.
  //This hasn't been hard test but if need be I can add a second zero. I haven't seen a UPC that fills the entire 
  //section with whole numbers.
  //Returning the i and j will establish the locations of the string on the array.
  var name = currentString[i]
  for (var j = i + 1; j < currentString.length; j++){
    if (containsNumber(currentString[j])){
      return [name, j];
    }
    name = name + ' ' + currentString[j];
  }
  return [name, j];
}

function findName(currentString, i){
  //This will check how long the name is by finding the first section of the sentence that starts with zero.
  //This hasn't been hard test but if need be I can add a second zero. I haven't seen a UPC that fills the entire 
  //section with whole numbers.
  //Returning the i and j will establish the locations of the string on the array.
  var name = currentString[i]
  for (var i = i + 1; i <= currentString.length; i++){
    if (currentString[i].charAt(0) === '0' && currentString[i].charAt(1) === '0'){
      return [name, i];
    }
    name = name + ' ' + currentString[i];
  }
}

// Function used to find the start of invoice line
function itemStartCheck(currentString, i){
  if (currentString.length <= i + 3){return false;}         //Checks if the string ends before the word can start
  if (containsLetter(currentString[i])){return false;}      //First number should be a number
  if (containsLetter(currentString[i + 1])){return false;}  //Second number should be a number
  if (containsNumber(currentString[i + 2].charAt(0))){
    if (currentString[i + 2].charAt(2) === '-' || currentString[i + 2].charAt(1) === '-'){
      return true;                                           //Third sections should have a dash as the third or second character.
    }
  }
  return false;
}

// Function to find if their is a number in the string
function containsNumber(str) {
  if (str === ''){return false;}
  return /\d/.test(str); // Returns true if string contains a digit
}

// Function to find if their is a letter in the string
function containsLetter(str) {
  if (str === ''){return false;}
  return /[a-zA-Z]/.test(str); // Returns true if string contains a letter
}
